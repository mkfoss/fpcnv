package fpcnv

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_ReadFields(t *testing.T) {

	type testtype struct {
		id       int
		input    []byte
		expected []*Field
		err      string
	}

	cases := []testtype{
		{1, []byte{0x69, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6C, 0x61, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x69, 0x72, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D},
			[]*Field{
				&Field{"id", FTInteger, 1, 4, 0, false, false, false},
				&Field{"last", FTCharacter, 5, 10, 0, false, false, false},
				&Field{"first", FTCharacter, 15, 10, 0, false, false, false},
			},
			"",
		},
	}

	for _, tc := range cases {
		t.Run(fmt.Sprintf("Read Field Collection #%d", tc.id), func(t *testing.T) {

			fl := NewMockFiler()
			fl.Data = tc.input

			flds, err := ReadFields(fl, len(tc.expected))
			if tc.err != "" {
				if err == nil {
					t.Fatalf("ReadFields(%d) expected error: %s", tc.id, tc.err)
				}
				assert.ErrorContains(t, err, tc.err)
			} else {
				if err != nil {
					t.Fatalf("ReadFields(%d) unexpected error: %s", tc.id, err)
				}
				for x := range tc.expected {

					assert.Equal(t, tc.expected[x], flds.fields[x])
				}
			}
		})
	}

}
